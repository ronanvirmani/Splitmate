{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useAuthContext } from './useAuthContext';\nimport { useGroupsContext } from './useGroupsContext';\nconst useFetchGroups = () => {\n  _s();\n  const {\n    user\n  } = useAuthContext();\n  const {\n    dispatch\n  } = useGroupsContext();\n  useEffect(() => {\n    const fetchGroups = async () => {\n      if (!user) return;\n      try {\n        const response = await fetch(`/api/users/${user._id}/groups/`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const json = await response.json();\n        if (response.ok) {\n          dispatch({\n            type: 'SET_GROUPS',\n            payload: json\n          });\n        } else {\n          console.error('Failed to fetch groups:', json);\n        }\n      } catch (err) {\n        console.error('Error fetching groups:', err);\n      }\n    };\n    fetchGroups();\n  }, [user, dispatch]);\n};\n_s(useFetchGroups, \"pmwfbLPJDr8IZDO6y8k6UEI2ekA=\", false, function () {\n  return [useAuthContext, useGroupsContext];\n});\nexport default useFetchGroups;","map":{"version":3,"names":["useEffect","useAuthContext","useGroupsContext","useFetchGroups","_s","user","dispatch","fetchGroups","response","fetch","_id","method","headers","json","ok","type","payload","console","error","err"],"sources":["/Users/ronan.virmani/VSCode/mern-project/frontend/src/hooks/useFetchUserGroups.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { useAuthContext } from './useAuthContext';\nimport { useGroupsContext } from './useGroupsContext';\n\nconst useFetchGroups = () => {\n  const { user } = useAuthContext();\n  const { dispatch } = useGroupsContext();\n\n  useEffect(() => {\n    const fetchGroups = async () => {\n      if (!user) return;\n\n      try {\n        const response = await fetch(`/api/users/${user._id}/groups/`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        const json = await response.json();\n\n        if (response.ok) {\n          dispatch({ type: 'SET_GROUPS', payload: json });\n        } else {\n          console.error('Failed to fetch groups:', json);\n        }\n      } catch (err) {\n        console.error('Error fetching groups:', err);\n      }\n    };\n\n    fetchGroups();\n  }, [user, dispatch]);\n};\n\nexport default useFetchGroups;\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,gBAAgB,QAAQ,oBAAoB;AAErD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM;IAAEC;EAAK,CAAC,GAAGJ,cAAc,CAAC,CAAC;EACjC,MAAM;IAAEK;EAAS,CAAC,GAAGJ,gBAAgB,CAAC,CAAC;EAEvCF,SAAS,CAAC,MAAM;IACd,MAAMO,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI,CAACF,IAAI,EAAE;MAEX,IAAI;QACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,cAAaJ,IAAI,CAACK,GAAI,UAAS,EAAE;UAC7DC,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;QAEF,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAI,CAAC,CAAC;QAElC,IAAIL,QAAQ,CAACM,EAAE,EAAE;UACfR,QAAQ,CAAC;YAAES,IAAI,EAAE,YAAY;YAAEC,OAAO,EAAEH;UAAK,CAAC,CAAC;QACjD,CAAC,MAAM;UACLI,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEL,IAAI,CAAC;QAChD;MACF,CAAC,CAAC,OAAOM,GAAG,EAAE;QACZF,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEC,GAAG,CAAC;MAC9C;IACF,CAAC;IAEDZ,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACF,IAAI,EAAEC,QAAQ,CAAC,CAAC;AACtB,CAAC;AAACF,EAAA,CA9BID,cAAc;EAAA,QACDF,cAAc,EACVC,gBAAgB;AAAA;AA8BvC,eAAeC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}