{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useAuthContext } from '../hooks/useAuthContext';\nimport { useGroupsContext } from '../hooks/useGroupContext';\nexport const useFetchUserGroups = () => {\n  _s();\n  const [groups, setGroups] = useState([]);\n  const {\n    user\n  } = useAuthContext();\n  const {\n    dispatch\n  } = useGroupsContext();\n  const fetchGroups = async () => {\n    console.log(user.groups);\n    try {\n      const response = await fetch(`/api/users/${user._id}/groups/`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch groups');\n      }\n      const groupsData = await response.json();\n      setGroups(groupsData);\n    } catch (error) {\n      console.error('Error fetching groups:', error);\n    }\n  };\n  useEffect(() => {\n    console.log('User object:', user);\n    if (user) {\n      fetchGroups();\n    }\n  }, [user]);\n  return groups;\n};\n_s(useFetchUserGroups, \"0xaciS6FlZA0XhzyWpxftn5I4XQ=\", false, function () {\n  return [useAuthContext, useGroupsContext];\n});","map":{"version":3,"names":["useState","useEffect","useAuthContext","useGroupsContext","useFetchUserGroups","_s","groups","setGroups","user","dispatch","fetchGroups","console","log","response","fetch","_id","method","headers","ok","Error","groupsData","json","error"],"sources":["/Users/ronan.virmani/VSCode/mern-project/frontend/src/hooks/useFetchUserGroups.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useAuthContext } from '../hooks/useAuthContext';\nimport { useGroupsContext } from '../hooks/useGroupContext';\n\n\nexport const useFetchUserGroups = () => {\n  const [groups, setGroups] = useState([]);\n  const { user } = useAuthContext();\n  const { dispatch } = useGroupsContext();\n\n  const fetchGroups = async () => {\n\n    console.log(user.groups)\n    try {\n      const response = await fetch(`/api/users/${user._id}/groups/`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch groups');\n      }\n\n      const groupsData = await response.json();\n      setGroups(groupsData);\n    } catch (error) {\n      console.error('Error fetching groups:', error);\n    }\n  };\n\n  useEffect(() => {\n    console.log('User object:', user);\n  \n    if (user) {\n      fetchGroups();\n    }\n  }, [user]);\n\n  return groups;\n};\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,gBAAgB,QAAQ,0BAA0B;AAG3D,OAAO,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM;IAAEQ;EAAK,CAAC,GAAGN,cAAc,CAAC,CAAC;EACjC,MAAM;IAAEO;EAAS,CAAC,GAAGN,gBAAgB,CAAC,CAAC;EAEvC,MAAMO,WAAW,GAAG,MAAAA,CAAA,KAAY;IAE9BC,OAAO,CAACC,GAAG,CAACJ,IAAI,CAACF,MAAM,CAAC;IACxB,IAAI;MACF,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAE,cAAaN,IAAI,CAACO,GAAI,UAAS,EAAE;QAC7DC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;MAC3C;MAEA,MAAMC,UAAU,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACxCd,SAAS,CAACa,UAAU,CAAC;IACvB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdX,OAAO,CAACW,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;EAEDrB,SAAS,CAAC,MAAM;IACdU,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEJ,IAAI,CAAC;IAEjC,IAAIA,IAAI,EAAE;MACRE,WAAW,CAAC,CAAC;IACf;EACF,CAAC,EAAE,CAACF,IAAI,CAAC,CAAC;EAEV,OAAOF,MAAM;AACf,CAAC;AAACD,EAAA,CApCWD,kBAAkB;EAAA,QAEZF,cAAc,EACVC,gBAAgB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}