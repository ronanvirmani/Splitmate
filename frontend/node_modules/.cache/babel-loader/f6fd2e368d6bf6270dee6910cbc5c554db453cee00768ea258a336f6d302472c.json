{"ast":null,"code":"export const createGroup = async e => {\n  e.preventDefault();\n  if (!name) {\n    setError('Group name is required');\n    return;\n  }\n  const group = {\n    name,\n    items: []\n  };\n  try {\n    const response = await fetch(`/api/groups/${user._id}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(group)\n    });\n    const json = await response.json();\n    if (response.ok) {\n      setName('');\n      console.log('New group created:', json);\n      dispatch({\n        type: 'CREATE_GROUP',\n        payload: json\n      });\n      setError(null);\n      fetchGroupItems(json._id); // Fetch items for the new group\n    } else {\n      setError(json.message);\n    }\n  } catch (err) {\n    console.error('Error creating group:', err);\n    setError('An error occurred while creating the group.');\n  }\n};","map":{"version":3,"names":["createGroup","e","preventDefault","name","setError","group","items","response","fetch","user","_id","method","headers","body","JSON","stringify","json","ok","setName","console","log","dispatch","type","payload","fetchGroupItems","message","err","error"],"sources":["/Users/ronan.virmani/VSCode/mern-project/frontend/src/Functions.js"],"sourcesContent":["export const createGroup = async (e) => {\n    e.preventDefault();\n\n    if (!name) {\n      setError('Group name is required');\n      return;\n    }\n\n    const group = {\n      name,\n      items: []\n    };\n\n    try {\n      const response = await fetch(`/api/groups/${user._id}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(group)\n      });\n\n      const json = await response.json();\n\n      if (response.ok) {\n        setName('');\n        console.log('New group created:', json);\n        dispatch({ type: 'CREATE_GROUP', payload: json });\n        setError(null);\n        fetchGroupItems(json._id); // Fetch items for the new group\n      } else {\n        setError(json.message);\n      }\n    } catch (err) {\n      console.error('Error creating group:', err);\n      setError('An error occurred while creating the group.');\n    }\n  };"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG,MAAOC,CAAC,IAAK;EACpCA,CAAC,CAACC,cAAc,CAAC,CAAC;EAElB,IAAI,CAACC,IAAI,EAAE;IACTC,QAAQ,CAAC,wBAAwB,CAAC;IAClC;EACF;EAEA,MAAMC,KAAK,GAAG;IACZF,IAAI;IACJG,KAAK,EAAE;EACT,CAAC;EAED,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,eAAcC,IAAI,CAACC,GAAI,EAAC,EAAE;MACtDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,KAAK;IAC5B,CAAC,CAAC;IAEF,MAAMW,IAAI,GAAG,MAAMT,QAAQ,CAACS,IAAI,CAAC,CAAC;IAElC,IAAIT,QAAQ,CAACU,EAAE,EAAE;MACfC,OAAO,CAAC,EAAE,CAAC;MACXC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEJ,IAAI,CAAC;MACvCK,QAAQ,CAAC;QAAEC,IAAI,EAAE,cAAc;QAAEC,OAAO,EAAEP;MAAK,CAAC,CAAC;MACjDZ,QAAQ,CAAC,IAAI,CAAC;MACdoB,eAAe,CAACR,IAAI,CAACN,GAAG,CAAC,CAAC,CAAC;IAC7B,CAAC,MAAM;MACLN,QAAQ,CAACY,IAAI,CAACS,OAAO,CAAC;IACxB;EACF,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZP,OAAO,CAACQ,KAAK,CAAC,uBAAuB,EAAED,GAAG,CAAC;IAC3CtB,QAAQ,CAAC,6CAA6C,CAAC;EACzD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}