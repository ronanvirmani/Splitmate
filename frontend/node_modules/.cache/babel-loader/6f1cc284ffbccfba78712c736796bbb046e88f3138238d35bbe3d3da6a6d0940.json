{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nconst useFetchGroupItems = () => {\n  _s();\n  const [members, setMembers] = useState([]);\n  const [items, setItems] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [splitAmount, setSplitAmount] = useState(0);\n  const fetchGroupItems = useCallback(async groupId => {\n    try {\n      const response = await fetch(`/api/groups/${groupId}`);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to fetch group items');\n      }\n      setMembers(data.members);\n      setItems(data.items);\n\n      // Calculate total price\n      const totalPrice = data.items.reduce((sum, item) => sum + item.price, 0);\n      setTotal(totalPrice);\n\n      // Calculate split amount per member\n      const split = data.members.length > 0 ? totalPrice / data.members.length : 0;\n      setSplitAmount(split);\n    } catch (err) {\n      console.error('Error fetching group items:', err.message || err);\n    }\n  }, []);\n  return {\n    members,\n    items,\n    total,\n    splitAmount,\n    fetchGroupItems\n  };\n};\n_s(useFetchGroupItems, \"UWuQzurB6QN7VBEVnV2yN0WJNT4=\");\nexport default useFetchGroupItems;","map":{"version":3,"names":["useState","useCallback","useFetchGroupItems","_s","members","setMembers","items","setItems","total","setTotal","splitAmount","setSplitAmount","fetchGroupItems","groupId","response","fetch","data","json","ok","Error","message","totalPrice","reduce","sum","item","price","split","length","err","console","error"],"sources":["/Users/ronan.virmani/VSCode/mern-project/frontend/src/hooks/useFetchGroupItems.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\nconst useFetchGroupItems = () => {\n  const [members, setMembers] = useState([]);\n  const [items, setItems] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [splitAmount, setSplitAmount] = useState(0);\n\n  const fetchGroupItems = useCallback(async (groupId) => {\n    try {\n      const response = await fetch(`/api/groups/${groupId}`);\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to fetch group items');\n      }\n\n      setMembers(data.members);\n      setItems(data.items);\n\n      // Calculate total price\n      const totalPrice = data.items.reduce((sum, item) => sum + item.price, 0);\n      setTotal(totalPrice);\n\n      // Calculate split amount per member\n      const split = data.members.length > 0 ? totalPrice / data.members.length : 0;\n      setSplitAmount(split);\n    } catch (err) {\n      console.error('Error fetching group items:', err.message || err);\n    }\n  }, []);\n\n  return { members, items, total, splitAmount, fetchGroupItems };\n};\n\nexport default useFetchGroupItems;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAE7C,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAEjD,MAAMY,eAAe,GAAGX,WAAW,CAAC,MAAOY,OAAO,IAAK;IACrD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,eAAcF,OAAQ,EAAC,CAAC;MACtD,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElC,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,IAAI,6BAA6B,CAAC;MAChE;MAEAf,UAAU,CAACW,IAAI,CAACZ,OAAO,CAAC;MACxBG,QAAQ,CAACS,IAAI,CAACV,KAAK,CAAC;;MAEpB;MACA,MAAMe,UAAU,GAAGL,IAAI,CAACV,KAAK,CAACgB,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACC,KAAK,EAAE,CAAC,CAAC;MACxEhB,QAAQ,CAACY,UAAU,CAAC;;MAEpB;MACA,MAAMK,KAAK,GAAGV,IAAI,CAACZ,OAAO,CAACuB,MAAM,GAAG,CAAC,GAAGN,UAAU,GAAGL,IAAI,CAACZ,OAAO,CAACuB,MAAM,GAAG,CAAC;MAC5EhB,cAAc,CAACe,KAAK,CAAC;IACvB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEF,GAAG,CAACR,OAAO,IAAIQ,GAAG,CAAC;IAClE;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAExB,OAAO;IAAEE,KAAK;IAAEE,KAAK;IAAEE,WAAW;IAAEE;EAAgB,CAAC;AAChE,CAAC;AAACT,EAAA,CA/BID,kBAAkB;AAiCxB,eAAeA,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}