{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useAuthContext } from './useAuthContext';\nimport { useGroupsContext } from './useGroupContext';\nconst useCreateGroup = () => {\n  _s();\n  const {\n    user\n  } = useAuthContext();\n  const {\n    dispatch\n  } = useGroupsContext();\n  const [error, setError] = useState(null);\n  const createGroup = async (name, items) => {\n    if (!name) {\n      setError('Group name is required');\n      return;\n    }\n    const group = {\n      name,\n      items\n    };\n    try {\n      const response = await fetch(`/api/groups/${user._id}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(group)\n      });\n      const json = await response.json();\n      if (response.ok) {\n        dispatch({\n          type: 'CREATE_GROUP',\n          payload: json\n        });\n        setError(null);\n      } else {\n        setError(json.message);\n      }\n    } catch (err) {\n      console.error('Error creating group:', err);\n      setError('An error occurred while creating the group.');\n    }\n  };\n  return {\n    createGroup,\n    error\n  };\n};\n_s(useCreateGroup, \"ndcvM+daYn2/K5cMW2MJJVk0ilQ=\", false, function () {\n  return [useAuthContext, useGroupsContext];\n});\nexport default useCreateGroup;","map":{"version":3,"names":["useState","useAuthContext","useGroupsContext","useCreateGroup","_s","user","dispatch","error","setError","createGroup","name","items","group","response","fetch","_id","method","headers","body","JSON","stringify","json","ok","type","payload","message","err","console"],"sources":["/Users/ronan.virmani/VSCode/mern-project/frontend/src/hooks/useCreateGroup.js"],"sourcesContent":["import { useState } from 'react';\nimport { useAuthContext } from './useAuthContext';\nimport { useGroupsContext } from './useGroupContext';\n\nconst useCreateGroup = () => {\n  const { user } = useAuthContext();\n  const { dispatch } = useGroupsContext();\n  const [error, setError] = useState(null);\n\n  const createGroup = async (name, items) => {\n    if (!name) {\n      setError('Group name is required');\n      return;\n    }\n\n    const group = { name, items };\n\n    try {\n      const response = await fetch(`/api/groups/${user._id}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(group)\n      });\n\n      const json = await response.json();\n\n      if (response.ok) {\n        dispatch({ type: 'CREATE_GROUP', payload: json });\n        setError(null);\n      } else {\n        setError(json.message);\n      }\n    } catch (err) {\n      console.error('Error creating group:', err);\n      setError('An error occurred while creating the group.');\n    }\n  };\n\n  return { createGroup, error };\n};\n\nexport default useCreateGroup;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,gBAAgB,QAAQ,mBAAmB;AAEpD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM;IAAEC;EAAK,CAAC,GAAGJ,cAAc,CAAC,CAAC;EACjC,MAAM;IAAEK;EAAS,CAAC,GAAGJ,gBAAgB,CAAC,CAAC;EACvC,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMS,WAAW,GAAG,MAAAA,CAAOC,IAAI,EAAEC,KAAK,KAAK;IACzC,IAAI,CAACD,IAAI,EAAE;MACTF,QAAQ,CAAC,wBAAwB,CAAC;MAClC;IACF;IAEA,MAAMI,KAAK,GAAG;MAAEF,IAAI;MAAEC;IAAM,CAAC;IAE7B,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,eAAcT,IAAI,CAACU,GAAI,EAAC,EAAE;QACtDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,KAAK;MAC5B,CAAC,CAAC;MAEF,MAAMS,IAAI,GAAG,MAAMR,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAElC,IAAIR,QAAQ,CAACS,EAAE,EAAE;QACfhB,QAAQ,CAAC;UAAEiB,IAAI,EAAE,cAAc;UAAEC,OAAO,EAAEH;QAAK,CAAC,CAAC;QACjDb,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,MAAM;QACLA,QAAQ,CAACa,IAAI,CAACI,OAAO,CAAC;MACxB;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACpB,KAAK,CAAC,uBAAuB,EAAEmB,GAAG,CAAC;MAC3ClB,QAAQ,CAAC,6CAA6C,CAAC;IACzD;EACF,CAAC;EAED,OAAO;IAAEC,WAAW;IAAEF;EAAM,CAAC;AAC/B,CAAC;AAACH,EAAA,CArCID,cAAc;EAAA,QACDF,cAAc,EACVC,gBAAgB;AAAA;AAqCvC,eAAeC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}