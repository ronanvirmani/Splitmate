{"ast":null,"code":"var _jsxFileName = \"/Users/ronan.virmani/VSCode/mern-project/frontend/src/pages/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useAuthContext } from '../hooks/useAuthContext';\nimport { useGroupsContext } from '../hooks/useGroupContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const {\n    user\n  } = useAuthContext();\n  const {\n    groups,\n    dispatch\n  } = useGroupsContext();\n  const [name, setName] = useState('');\n  const [items, setItems] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchGroups = async () => {\n      const response = await fetch(`/api/users/${user._id}/groups/`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const json = await response.json();\n      if (response.ok) {\n        dispatch({\n          type: 'SET_GROUPS',\n          payload: json\n        });\n      }\n    };\n    fetchGroups();\n  }, [dispatch]);\n  useEffect(() => {\n    const createGroup = async () => {\n      const response = await fetch(`/api/users/${user._id}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name,\n          items\n        })\n      });\n      const json = await response.json();\n      if (response.ok) {\n        dispatch({\n          type: 'CREATE_GROUP',\n          payload: json\n        });\n      }\n    };\n    createGroup();\n  }, [dispatch]);\n  useEffect(() => {\n    const createGroup = async () => {\n      const response = await fetch(`/api/users/${user._id}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name,\n          items\n        })\n      });\n      const json = await response.json();\n      if (response.ok) {\n        setName('');\n        setItems([]);\n        console.log('new group created', json);\n        dispatch({\n          type: 'CREATE_GROUP',\n          payload: json\n        });\n      } else {}\n    };\n    createGroup();\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Groups\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), user && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"User ID: \", user._id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: groups && groups.length > 0 ? groups.map(group => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: group.name\n      }, group._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"No groups available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Create new group\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"USp2Omz+jH58AwXBZ8cjmMsfrjo=\", false, function () {\n  return [useAuthContext, useGroupsContext];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","useAuthContext","useGroupsContext","jsxDEV","_jsxDEV","Dashboard","_s","user","groups","dispatch","name","setName","items","setItems","error","setError","fetchGroups","response","fetch","_id","method","headers","json","ok","type","payload","createGroup","body","JSON","stringify","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","group","_c","$RefreshReg$"],"sources":["/Users/ronan.virmani/VSCode/mern-project/frontend/src/pages/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useAuthContext } from '../hooks/useAuthContext';\nimport { useGroupsContext } from '../hooks/useGroupContext';\n\nconst Dashboard = () => {\n  const { user } = useAuthContext();\n  const { groups, dispatch } = useGroupsContext();\n\n  const [ name, setName ] = useState('')\n  const [ items, setItems] = useState([])\n  const [error, setError] = useState(null)\n\n\n  useEffect(() => {\n    const fetchGroups = async () => {\n      const response = await fetch(`/api/users/${user._id}/groups/`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const json = await response.json();\n\n      if (response.ok){\n        dispatch({ type: 'SET_GROUPS', payload: json });\n      }\n    }\n    fetchGroups();\n  }, [dispatch])\n\n  useEffect(() => {\n    const createGroup = async () => {\n      const response = await fetch(`/api/users/${user._id}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ name, items })\n      });\n      const json = await response.json();\n\n      if (response.ok){\n        dispatch({ type: 'CREATE_GROUP', payload: json });\n      }\n    }\n    createGroup();\n  }, [dispatch])\n\n  useEffect(() => {\n    const createGroup = async () => {\n      const response = await fetch(`/api/users/${user._id}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ name, items })\n      });\n      const json = await response.json();\n\n      if (response.ok){\n        setName('')\n        setItems([])\n        console.log('new group created', json)\n        dispatch({ type: 'CREATE_GROUP', payload: json });\n      }\n      else{\n        \n      }\n    }\n    createGroup();\n  }, [dispatch])\n\n  \n\n  return (\n    <div>\n      <h1>Dashboard</h1>\n      <h2>Groups</h2>\n      {user && <p>User ID: {user._id}</p>}\n      <ul>\n        {groups && groups.length > 0 ? (\n          groups.map((group) => (\n            <li key={group._id}>{group.name}</li>\n          ))\n        ) : (\n          <li>No groups available</li>\n        )}\n      </ul>\n      <button>\n        Create new group\n      </button>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}