{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useAuthContext } from '../hooks/useAuthContext';\nexport const useFetchUserGroups = () => {\n  _s();\n  const [userGroups, setUserGroups] = useState([]);\n  const {\n    user\n  } = useAuthContext();\n  useEffect(() => {\n    console.log('User object:', user);\n  }, [user]);\n  useEffect(() => {\n    console.log('user email:', user._id);\n  });\n  useEffect(() => {\n    const fetchUserGroups = async () => {\n      try {\n        const response = await fetch(`/api/users/${user._id}/groups`);\n        const groups = await response.json();\n        setUserGroups(groups);\n      } catch (error) {\n        console.error('Error fetching user groups:', error);\n      }\n    };\n    if (user) {\n      fetchUserGroups();\n    }\n  }, [user]);\n  return userGroups;\n};\n_s(useFetchUserGroups, \"CZPzHSjsl3iHzDCdA8vFtl7Z9ks=\", false, function () {\n  return [useAuthContext];\n});","map":{"version":3,"names":["useState","useEffect","useAuthContext","useFetchUserGroups","_s","userGroups","setUserGroups","user","console","log","_id","fetchUserGroups","response","fetch","groups","json","error"],"sources":["/Users/ronan.virmani/VSCode/mern-project/frontend/src/hooks/useFetchUserGroups.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useAuthContext } from '../hooks/useAuthContext';\n\nexport const useFetchUserGroups = () => {\n  const [userGroups, setUserGroups] = useState([]);\n  const { user } = useAuthContext();\n\n  useEffect(() => {\n    console.log('User object:', user);\n}, [user]);\n\nuseEffect(() => {\n    console.log('user email:', user._id);\n})\n\n  useEffect(() => {\n    \n    const fetchUserGroups = async () => {\n      try {\n        const response = await fetch(`/api/users/${user._id}/groups`);\n        const groups = await response.json();\n        setUserGroups(groups);\n      } catch (error) {\n        console.error('Error fetching user groups:', error);\n      }\n    };\n\n    if (user) {\n      fetchUserGroups();\n    }\n  }, [user]);\n\n  return userGroups;\n};\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,cAAc,QAAQ,yBAAyB;AAExD,OAAO,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM;IAAEO;EAAK,CAAC,GAAGL,cAAc,CAAC,CAAC;EAEjCD,SAAS,CAAC,MAAM;IACdO,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,IAAI,CAAC;EACrC,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEVN,SAAS,CAAC,MAAM;IACZO,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEF,IAAI,CAACG,GAAG,CAAC;EACxC,CAAC,CAAC;EAEAT,SAAS,CAAC,MAAM;IAEd,MAAMU,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,cAAaN,IAAI,CAACG,GAAI,SAAQ,CAAC;QAC7D,MAAMI,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QACpCT,aAAa,CAACQ,MAAM,CAAC;MACvB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdR,OAAO,CAACQ,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;IAED,IAAIT,IAAI,EAAE;MACRI,eAAe,CAAC,CAAC;IACnB;EACF,CAAC,EAAE,CAACJ,IAAI,CAAC,CAAC;EAEV,OAAOF,UAAU;AACnB,CAAC;AAACD,EAAA,CA9BWD,kBAAkB;EAAA,QAEZD,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}